// Based on the idea: https://medium.com/@alshakero/f7fbee899a61
// Using minimal setup defined: https://developers.google.com/web/fundamentals/app-install-banners/native
import React, { useContext } from 'react';
import { Helmet } from 'react-helmet';

import { ConfigContext } from '#/utils/context';
import { APP_ID_ANDROID, APP_ID_IOS } from '#/constants';

const PLAY_STORE_URL = `https://play.google.com/store/apps/details`;
const ITUNES_URL = `https://apps.apple.com/us/app/starhub-tv/`;

const getPlayStoreUrl = id => {
  const url = new URL(PLAY_STORE_URL);
  url.searchParams.set('id', id);

  return url.toString();
};

// Link generated by
// https://linkmaker.itunes.apple.com/en-gb/details/586220439?country=us&mediaType=ios_apps&term=starhub+tv%2B&type=software
const getITunesUrl = id => {
  const url = new URL(id, ITUNES_URL);
  url.searchParams.set('mt', 8);

  return url.toString();
};

const getIconUrl = path => {
  const url = new URL(path, window?.location?.origin || '');

  return url.toString();
};

const WebAppManifest = () => {
  const { appName } = useContext(ConfigContext);
  const manifest = {
    name: appName,
    short_name: appName,
    icons: [
      {
        // MDN said relative URL is OK: https://developer.mozilla.org/en-US/docs/Web/Manifest/icons
        // But Chrome will continue to throw error.
        // Hence, we will convert the relative URL to absolute.
        src: getIconUrl('static/images/icon-192x192.svg'),
        type: 'image/svg+xml',
        sizes: '192x192'
      },
      {
        src: getIconUrl('static/images/icon-512x512.svg'),
        type: 'image/svg+xml',
        sizes: '512x512'
      }
    ],
    prefer_related_applications: true,
    related_applications: [
      {
        platform: 'play',
        id: APP_ID_ANDROID,
        url: getPlayStoreUrl(APP_ID_ANDROID)
      },
      { platform: 'itunes', id: APP_ID_IOS, url: getITunesUrl(APP_ID_IOS) }
    ]
  };
  const blob = new Blob([JSON.stringify(manifest)], {
    type: 'application/manifest+json'
  });
  const manifestURL = URL.createObjectURL(blob);

  return (
    <Helmet>
      <link rel="manifest" href={manifestURL} />
    </Helmet>
  );
};

export default WebAppManifest;
